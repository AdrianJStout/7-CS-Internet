#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+OPTIONS: f:nil author:nil num:1 creator:nil timestamp:nil  
#+TITLE: Modelling a DNS
#+AUTHOR: Marc Scott
#+BEGIN_HTML
<div class=ribbon>
<a href="https://github.com/MarcScott/7-CS-Internet">Fork me on GitHub</a>
</div>
#+END_HTML

* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* Modelling a DNS table
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Go to [[http://mit.scratch.edu][The MIT Scratch website]]
- Create a new project
- Name it DNS model
** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:
- A Domain Name Server has a table stored on it, that will look something like this:
| Domain Name |     IP Address |
|-------------+----------------|
| google.com  | 74.125.239.116 |
| bbc.co.uk   |  212.58.246.90 |

A quick note. Not everything explained in this presentation is true. Some of it is a [[http://en.wikipedia.org/wiki/Lie-to-children][simplification]] to make things easier to understand
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- We're going to have to build a DNS Table to begin with. This is going to be made up of two lists.
- In Scratch, create a new list called =Domain Names= and then another list called =IP Addresses=
- To the =Domain Names= list add the domain name /google.com/
- To the =IP Addresses= list add the IP address /74.125.239.116/
[[file:images/Create_Lists.png]]
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:


- We're going to need a few more Domain names and IP Addresses to populate our table.
- Goto [[http://www.hcidata.info/host2ip.cgi][this site]]
  - Use the webpage to look up some common domain names like =facebook.com= and =youtube.com= and add them to the lists.
  - You should end up with something like this.
[[file:images/Populated_Lists.png]]
- Try to gather around 10 domains and IP addresses.
* Linear Search
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:
- When you type in a URL into a webbrowser address bar, your computer consults the DNS server, to find the IP address.
- The DNS server has to lookup the domain name and find the corresponding IP address
- To do this the server needs to use a searching algorithm
----
On the image below you're presented with an Identity Parade Lineup. You need to find this face:
[[file:images/Face.jpg]]

#+BEGIN_HTML
	    <canvas id="myCanvas" width="960" height="600"></canvas>
	    <script> //Some seriously ugly js here. Come back and fix.
	     var canvas = document.getElementById('myCanvas');
	     var context = canvas.getContext('2d');
	     var UsualBkg = new Image();
	     var blank_face = new Image();
	     var image1Vis = true;
	     var image2Vis = true;
	     var image3Vis = true;
	     var image4Vis = true;
	     var image5Vis = true;
	     var faceSize = 100
	     var x;
	     var y;
	     

	     function getMousePos(canvas, evt) 
	     {
	       var rect = canvas.getBoundingClientRect();
	       return {
		 x: evt.clientX - rect.left,
		 y: evt.clientY - rect.top
	       };
	     }


	     canvas.addEventListener('mousedown', function(evt) 
				     {
		 var mousePos = getMousePos(canvas, evt);

		 if (mousePos.x>100 && mousePos.x<200 && mousePos.y>130 && mousePos.y<230)
		 {
		   image1Vis = false
		 }
		 if (mousePos.x>240 && mousePos.x<340 && mousePos.y>90 && mousePos.y<190)
		 {
		   image2Vis = false
		 }
		 if (mousePos.x>435 && mousePos.x<535 && mousePos.y>75 && mousePos.y<1750)
		 {
		   image3Vis = false
		 }
		 if (mousePos.x>585 && mousePos.x<685 && mousePos.y>90 && mousePos.y<190)
		 {
		   image4Vis = false
		 }
		 if (mousePos.x>760 && mousePos.x<860 && mousePos.y>100 && mousePos.y<200)
		 {
		   image5Vis = false
		 }
		 context.drawImage(UsualBkg, 0, 0, 960, 600);
		 if (image1Vis == true) 
		 {
		   context.drawImage(blank_face, 100, 120, 100, 100);
		 }
		 if (image2Vis == true) 
		 {
		   context.drawImage(blank_face, 240, 90, 100, 100);
		 }
		 if (image3Vis == true) 
		 {
		   context.drawImage(blank_face, 435, 75, 100, 100);
		 }
		 if (image4Vis == true) 
		 {
		   context.drawImage(blank_face, 585, 90, 100, 100);
		 }
		 if (image5Vis == true) 
		 {
		   context.drawImage(blank_face, 760, 100, 100, 100);
		 }
	       }, false);

	     UsualBkg.onload = function() {
	       context.drawImage(UsualBkg, 0, 0, 960, 600);
	       context.drawImage(blank_face, 100, 130, 100, 100);
	       context.drawImage(blank_face, 240, 90, 100, 100);
	       context.drawImage(blank_face, 435, 75, 100, 100);
	       context.drawImage(blank_face, 585, 90, 100, 100);
	       context.drawImage(blank_face, 760, 100, 100, 100);
	     };
	     UsualBkg.src = 'images/The_Usual_suspects.jpg';
	     blank_face.src = 'images/blank_face.gif';
	    </script>
#+END_HTML

** Documnent It
:PROPERTIES:
:HTML_CONTAINER_CLASS: documnet
:END:
- Explain how you choose to find the correct face from the line up.
- Try and explain how you think a computer might have doen it.
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- A linear search is a method of going through a list of items, one by one, and checking each item. 
- Imagine we had a list of 'things'
=[cat,dog,horse,mouse,rabbit,parrot,elephant]=
- If we wanted a computer to program to find the position of the element
=parrot= it would check from left to right
- The program would check what was at position 1, see if it was parrot and if it wasn't it would move onto position 2, and so on.

* Indexing a list
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- As a computer reads through a list, it needs to keep track of where it is. This is what an index is for.
- Imagine we have the following two lists:
#+BEGIN_EXAMPLE
    OperatingSystems = ['Mac OSX','Windows 8','Android','iOS','Ubuntu']
    Rating = ['4/5','2/5','4/5','3/5','5/5']
#+END_EXAMPLE
- The items in the first list are Operating systems.
- The items in the second list give a user rating out of 5.
- Imagine we wanted to find out the rating out of 5 for Android.
- We could step through the list of operating systems until we found Android.
- This would not tell us where to find the rating out of five in the second list though. It would just tell us that Android exists in the first list.
#+BEGIN_EXAMPLE
    OperatingSystems = ['Mac OSX','Windows 8','Android','iOS','Ubuntu']
    Rating = ['4/5','2/5','4/5','3/5','5/5']                 
#+END_EXAMPLE
- As we move through (iterate) the first list searching for 'Android', we keep a count of our position.
- The algorithm looks something like this:
#+BEGIN_EXAMPLE
1. index = 1
2. Is Android at index (position 1)
3. No, so add 1 to index
4. Is Android at index (position 2)
5. No, so add 1 to index.
6. Is Android at index (position 3)
7. Yes. So look up index of the second list
8. index (position 3) of the second list is 4/5
9. So Android has a rating of 4/5
#+END_EXAMPLE
* Using a linear search in our DNS.
In our Scratch program so far we have a list of domain names and a list
of IP addresses.
We need to be able to conduct a linear search on the list of domain
names to find the position of any given name.
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- You're going to need a couple of new variables to start.
1. Create a variable called =domain=
2. Create a variable called =index=
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- When the script starts - the program should ask for a domain name.
- The variable =domain= is set to the answer.
- The variable =index= is set to 1
- Within a loop that repeats the same number of times as the length of the Domain Name list.
- If the =index= of the Domain Name list = the variable =domain=
- Say the =index= of the IP Address list Else Change the variable =index= by 1
** Pseudocode

#+BEGIN_EXAMPLE
    when GreenFlag clicked
        ask "What domain are you looking for"
        set domain to answer
        set index to 1
        repeat (length of Domain Names)
            if (index of Domain Names) = domain
                say ("the IP address is", index of IP Addresses)
            else
                change index by 1
            
#+END_EXAMPLE

[[#][[[images/arrow.png]]]]

** The blocks

Try and flick back up to the pseudocode and figure out how to place them
before scrolling down

[[images/linear_search_blocks.png]]
[[#][[[images/arrow.png]]]]

** The blocks part 2

If you're stuck here are a few of the blocks that have been stacked for
you.

See if you can assemble the script now, before scrolling down.

[[images/linear_search_blocks2.png]]
[[#][[[images/arrow.png]]]]

** The completed script

[[images/linear_search_script.png]]
[[#][[[images/arrow.png]]]]

** The video

* A Linear Search Project

** Instructions

You're going to try an implement your own Linear Search program now.

1. Create a Scratch program that:

   -  Uses two lists, one to store a Subject Name (e.g. Science) and the
      other to store a target grade.
   -  Allows a user to search for a Subject Name and returns the target
      grade.

2. Use any sprites you like.
3. If you have time, try to make it return 'Not found" if a subject that
   doesn't exist is asked for.

[[#][[[images/arrow.png]]]]

** Recap.

1. Domain names are easy for humans to read and remember.
2. Each domain name links to an IP address that computers use to send
   messages to each other.
3. A Domain Name Server (DNS) stores a table of domain names and IP
   addresses.
4. When you type in a URL, your computer asks the DNS what the IP
   address is for the domain name.
5. Linear search is one method of finding an element in a list.


