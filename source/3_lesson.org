#+STARTUP:indent
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="css/lesson.css"/>
#+OPTIONS: f:nil author:nil num:1 creator:nil timestamp:nil html-style:nil 
#+TITLE: Modelling a DNS
#+AUTHOR: Marc Scott
#+BEGIN_HTML
<div class=ribbon>
<a href="https://github.com/MarcScott/7-CS-Internet">Fork me on GitHub</a>
</div>
#+END_HTML

* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:
** Present It
:PROPERTIES:
:HTML_CONTAINER_CLASS: present
:END:
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:
** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:
** Try It:
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
** Badge It:
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
* Modelling a DNS table
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Go to [[http://mit.scratch.edu][The MIT Scratch website]]
- Create a new project
- Name it DNS model
** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:
- A Domain Name Server has a table stored on it, that will look something like this:
| Domain Name |     IP Address |
|-------------+----------------|
| google.com  | 74.125.239.116 |
| bbc.co.uk   |  212.58.246.90 |
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- We're going to have to build a DNS Table to begin with. This is going to be made up of two lists.
- In Scratch, create a new list called =Domain Names= and then another list called =IP Addresses=
- To the =Domain Names= list add the domain name /google.com/
- To the =IP Addresses= list add the IP address /74.125.239.116/
[[file:images/Create_Lists.png]]

** Present It
:PROPERTIES:
:HTML_CONTAINER_CLASS: present
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:
** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:
** Try It:
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
** Badge It:
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
*** Go to [[http://scratch.mit.edu][Scratch]] and start a new project

Call it DNS Model

[[#][[[images/arrow.png]]]]

** Explaining DNS

A DNS has a table stored on it that looks something like this:

| Domain Name   | IP Address       |
| google.com    | 74.125.239.116   |
| bbc.co.uk     | 212.58.246.90    |

A quick note. Not everything explained in this presentation is true.
Some of it is a
[[http://en.wikipedia.org/wiki/Lie-to-children][simplification]] to make
things easier to understand

* Adding to the DNS table

[[#][[[images/arrow.png]]]]

** More Domain Names

We're going to need a few more Domain names and IP Addresses to populate
our table.

Goto [[http://www.hcidata.info/host2ip.cgi][this site]]

Use the webpage to look up some common domain names like =facebook.com=
and =youtube.com= and add them to the lists.

[[#][[[images/arrow.png]]]]

You should end up with something like this.

Try and get at least 10 domain names and their corresponding IP
Addresses

[[images/Populated_Lists.png]]

* Linear Search

[[#][[[images/arrow.png]]]]

** Searching algorithms

When you type in a URL into a webbrowser address bar, your computer
consults the DNS server, to find the IP address.

The DNS server has to lookup the domain name and find the corresponding
IP address

To do this the server needs to use a searching algorithm

[[#][[[images/arrow.png]]]]

** Linear Search

On the slide below you're going to be presented with an Identity Parade
Lineup. You need to find this face:

[[images/Face.jpg]]
[[#][[[images/arrow.png]]]]

[[#][[[images/arrow.png]]]]

** How did you do it?

You could have selected people at random. This is one way of
accomplishing a search.

Or maybe you started from one side and worked your way across. This is
how a computer program would accomplish a search.

This method of searching is called a linear search.

[[#][[[images/arrow.png]]]]

** Linear Search

Imagine we had a list of 'things'

=[cat,dog,horse,mouse,rabbit,parrot,elephant]=

If we wanted a computer to program to find the position of the element
=parrot= it would check from left to right

The program would check what was at position 1, see if it was parrot and
if it wasn't it would move onto position 2, and so on.

* Indexing a list

[[#][[[images/arrow.png]]]]

** What is an index?

As a computer reads through a list, it needs to keep track of where it
is. This is what an index is for.

Imagine we have the following two lists:

#+BEGIN_EXAMPLE
    OperatingSystems = ['Mac OSX','Windows 8','Android','iOS','Ubuntu']
    Rating = ['4/5','2/5','4/5','3/5','5/5']
                            
#+END_EXAMPLE

The items in the first list are Operating systems. The items in the
second list give a user rating out of 5.

** A quick linear search

Imagine we wanted to find out the rating out of 5 for Android.

We could step through the list of operating systems until we found
Android.

This would not tell us where to find the rating out of five in the
second list though. It would just tell us that Android exists in the
first list.

** Using an index

#+BEGIN_EXAMPLE
    OperatingSystems = ['Mac OSX','Windows 8','Android','iOS','Ubuntu']
    Rating = ['4/5','2/5','4/5','3/5','5/5']                
                            
#+END_EXAMPLE

As we move through (iterate) the first list searching for 'Android', we
keep a count of our position.

The algorithm looks something like this:

1. =index = 1=
2. Is Android at =index= (position 1)
3. No, so add =1= to =index=.
4. Is Android at =index= (position 2)
5. No, so add =1= to =index=.
6. Is Android at =index= (position 3)
7. Yes. So look up =index= of the second list
8. =index= (position 3) of the second list is 4
9. So Android has a rating of 4

* Using a linear search in our DNS.

[[#][[[images/arrow.png]]]]

** Searching for domain names

In our Scratch program so far we have a list of domain names and a list
of IP addresses.

We need to be able to conduct a linear search on the list of domain
names to find the position of any given name.

[[#][[[images/arrow.png]]]]

** Getting Started

You're going to need a couple of new variables to start.

1. Create a variable called =domain=
2. Create a variable called =index=

[[#][[[images/arrow.png]]]]

** A linear search algorithm

When the script starts - the program asks for a domain name.

The variable =domain= is set to the answer.

The variable =index= is set to 1

Within a loop that repeats the same number of times as the length of the
Domain Name list.

If the =index= of the Domain Name list = the variable =domain=

-  Say the =index= of the IP Address list

Else

-  Change the variable =index= by 1

[[#][[[images/arrow.png]]]]

** Pseudocode

#+BEGIN_EXAMPLE
    when GreenFlag clicked
        ask "What domain are you looking for"
        set domain to answer
        set index to 1
        repeat (length of Domain Names)
            if (index of Domain Names) = domain
                say ("the IP address is", index of IP Addresses)
            else
                change index by 1
            
#+END_EXAMPLE

[[#][[[images/arrow.png]]]]

** The blocks

Try and flick back up to the pseudocode and figure out how to place them
before scrolling down

[[images/linear_search_blocks.png]]
[[#][[[images/arrow.png]]]]

** The blocks part 2

If you're stuck here are a few of the blocks that have been stacked for
you.

See if you can assemble the script now, before scrolling down.

[[images/linear_search_blocks2.png]]
[[#][[[images/arrow.png]]]]

** The completed script

[[images/linear_search_script.png]]
[[#][[[images/arrow.png]]]]

** The video

* A Linear Search Project

** Instructions

You're going to try an implement your own Linear Search program now.

1. Create a Scratch program that:

   -  Uses two lists, one to store a Subject Name (e.g. Science) and the
      other to store a target grade.
   -  Allows a user to search for a Subject Name and returns the target
      grade.

2. Use any sprites you like.
3. If you have time, try to make it return 'Not found" if a subject that
   doesn't exist is asked for.

[[#][[[images/arrow.png]]]]

** Recap.

1. Domain names are easy for humans to read and remember.
2. Each domain name links to an IP address that computers use to send
   messages to each other.
3. A Domain Name Server (DNS) stores a table of domain names and IP
   addresses.
4. When you type in a URL, your computer asks the DNS what the IP
   address is for the domain name.
5. Linear search is one method of finding an element in a list.


